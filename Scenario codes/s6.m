function [allData, scenario, sensor] = generateSensorData()
% This program simulates a driving scenario using MATLAB's Automated Driving Toolbox.
% It generates sensor data for an ego vehicle navigating through a predefined environment
% with various actors, such as other vehicles and pedestrians.

% The main function, generateSensorData, initializes the driving scenario and creates
% the ego vehicle and sensors. It then enters a loop where it continuously generates
% sensor detections based on the positions of the actors relative to the ego vehicle
% at each time step until the scenario is complete.

% The generated data includes the time of detection, the poses of all actors, and
% the sensor detections, which are stored in a structured format for later analysis.

% The program also includes helper functions to create the driving scenario and
% the sensors, defining the road layout, the ego vehicle's trajectory, and the
% characteristics of the sensors used to detect other actors in the environment.
%generateSensorData - Returns sensor detections
%    allData = generateSensorData returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = generateSensorData optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 23.2 (R2023b) and Automated Driving Toolbox 23.2 (R2023b).
% Generated on: 25-Apr-2024 23:52:05

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    % Generate detections for the sensor
    laneDetections = [];
    ptClouds = [];
    insMeas = [];
    [objectDetections, isValidTime] = sensor(poses, time);
    numObjects = length(objectDetections);
    objectDetections = objectDetections(1:numObjects);

    % Aggregate all detections into a structure for later use
    if isValidTime
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release the sensor object so it can be used again.
release(sensor);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensor = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensor = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [0.95 0], ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [42 1.3 0;
    5.9 0.7 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [22 18.5 0;
    23 -16.6 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [35.9 2.9 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [35.9 2.9 0;
    28 2.4 0;
    23.2 1.9 0;
    21.8 -2.9 0;
    22 -8.5 0];
speed = [30;45;30;20;20];
waittime = [0;0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [30.5 -1 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
waypoints = [30.5 -1 0;
    17.4 -1.8 0;
    12.8 -1 0;
    15.7 2.8 0;
    20.1 3.8 0;
    21.4 8.6 0];
speed = [30;40;50;30;20;30];
waittime = [0;0;0;0;0;0];
trajectory(car1, waypoints, speed, waittime);

pedestrian = actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [25.0045072835424 4.99989837033239 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'Pedestrian');
waypoints = [25.0045072835424 4.99989837033239 0;
    25 -4.7 0;
    20.8 -5.1 0];
speed = [4;10;5];
waittime = [0;0;0];
trajectory(pedestrian, waypoints, speed, waittime);

